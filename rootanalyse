#!/usr/bin/env python
################################################################################
from RootAnalyser import exroot_dir as RA_exrootdir
import time,os,sys,argparse
import StringIO
import ROOT
################################################################################
class ParserError(Exception):
    def __init__(self, message, parser):
        # Call the base class constructor with the parameters it needs
        super(Exception, self).__init__(message)
        self.message = message
        self.parser = parser
    def __str__(self):
        rep = StringIO.StringIO()
        print >>  rep, self.message
        print >>  rep, ''
        print >>  rep, self.parser.format_help()
        return rep.getvalue()
################################################################################
supported_trees= {'LHCO','LHEF'}
################################################################################
parser = argparse.ArgumentParser(description="Analyse an event file in LHCO or LHEF format using your TPySelector.")
parser.add_argument("rootfile", metavar="ROOTFILE", type=str,  help="Path to input root file.")
parser.add_argument("selector", metavar="SELECTOR", type=str,  help="Path to user's TPySelector implementation without the '.py' extension")
parser.add_argument("-e","--exroot", metavar="EXROOT", type=str, default=argparse.SUPPRESS, help="Location of libExRootAnalysis.so")
parser.add_argument("-t","--tree", metavar="TREE", type=str, default=argparse.SUPPRESS, help="Name of TTree to analyse (one of: {})".format(', '.join(supported_trees)))
parser.add_argument("-o","--options", metavar="OPT", type=str, default="", help="Option string to feed into the analysis' Process() method")
################################################################################
args = parser.parse_args()
################################################################################
error_e_option='''
Location of libExRootAnalysis.so unspecified. use "-e" option, define an 
environment variable "EXROOTANALYSIS" or set exroot_dir in __init__.py of the 
RootAnalyser package.
'''
error_multitree='''
More than one of the supported tree structures exists in {}. 
Please specify which one to read using the "-t" option.
'''.format(args.rootfile)

################################################################################
try: # catch all ParserErrors raised
    # Load ExRootAnalysis library
    try:
        exrootdir = args.exroot
    except AttributeError:
        try:
            exrootdir = os.environ['EXROOTANALYSIS']
            if not exrootdir: raise KeyError
        except KeyError:
            exrootdir = RA_exrootdir
            print 'Trying default location for libExRootAnalysis.so: {}'.format(exrootdir)
            if not os.path.exists(exrootdir):
                raise ParserError(error_e_option,parser)
    libexroot = '{}/libExRootAnalysis.so'.format(exrootdir)
    if not os.path.exists(libexroot): raise ParserError('Could not find "libExRootAnalysis.so" in {}'.format(exrootdir),parser)
    print 'Found libExRootAnalysis.so in {}'.format(exrootdir)
    ROOT.gSystem.Load(libexroot)

    # Get list of keys in file
    myfile = ROOT.TFile.Open(args.rootfile,'READ')
    keys = []
    for f in myfile.GetListOfKeys():
        keys.append(f.GetName())
    myfile.Close()

    try:# See if specified tree name is set of supported trees
        assert args.tree in keys
        treename = args.tree
   
    except AttributeError: # See if supported tree name is in list of keys
        trees = supported_trees.intersection(set(keys))
        if len(trees)==1: 
            treename = list(trees)[0]
        else:
            raise ParserError(error_multitree,parser)
    except AssertionError:
        error_supported_trees = '''TREE option -t "{}" not supported.'''.format(args.tree)
        raise ParserError(error_supported_trees,parser)
            
except ParserError as err:
    print ''
    print 'ParserError:'
    print ''
    print err
    sys.exit()

################################################################################
selector = args.selector.replace('.py','')
print ''
print 'Analysing {} with selector {}.py'.format(args.rootfile, selector)
print 'Reading tree: {}'.format(treename)
print ''
# Process tree
new_chain = ROOT.TChain(treename) 
new_chain.Add(args.rootfile)
start = time.time() # Timer
print 'Begin analysis'
new_chain.Process('TPySelector', selector) # selector file name without '.py'
print 'Completed in {} seconds'.format((time.time() - start))
print ''

