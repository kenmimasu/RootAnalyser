#!/usr/bin/env python
################################################################################
import Rosetta as HEFT
from Rosetta.implemented import bases
import StringIO, os, argparse, sys
import subprocess as sub
################################################################################
parser = argparse.ArgumentParser(description="Read in an LHA format parameter card in a particular basis and write a new param card in the mass basis.")
parser.add_argument("param_card", metavar="PARAMCARD", type=str,  help="Input parameter card.")
parser.add_argument("basis", metavar="BASIS", type=str,  help="Basis of coefficients in parameter card (one of: {}).".format(', '.join(bases.keys())))
parser.add_argument("-o","--output", metavar="OUTPUT", type=str, default='', help="Output file name. Default: [PARAMCARD]_new")
parser.add_argument("-b","--blockin", metavar="BLOCKIN", type=str, default='newcoup', help="New coupling block to be read in. Default: newcoup")
parser.add_argument("-B","--blockout", metavar="BLOCKOUT", type=str, default='newcoup', help="New coupling block to be written out. Default: newcoup")
parser.add_argument("-t","--target", metavar="TARGETBASIS", type=str, default='mass', help="Basis into which to translate (one of: {}). Default: mass".format(', '.join(bases.keys())))
parser.add_argument("-w","--overwrite", action='store_true', help="Overwrite any pre-existing output file.")
################################################################################
args = parser.parse_args()
mybasis = bases[args.basis.lower()] # Set basis class, must be defined in Rosetta.implemented.bases
if not args.output: # output file name
    if '.' in args.param_card:
        new_name = args.param_card.split('.')
        new_name.insert(-1,'_new.')
        new_param_card = ''.join(new_name)
    else:
        new_name = args.param_card+'_new'
else:
    new_param_card = args.output

print ''
print '########## Rosetta ##########'
print 'Basis class used to read in param card: {}'.format(mybasis)
basis_instance = mybasis(param_card=args.param_card, block_in=args.blockin, block_out=args.blockout, output_basis=args.target) # create instance of mybasis
print 'Basis name: {}'.format(basis_instance.name)
if basis_instance.write_param_card(new_param_card, overwrite=args.overwrite): # write out new param card
    print 'Wrote new param card to {}.'.format(new_param_card)
    print '#############################'
    print ''
else:
    print 'Exit'
################################################################################

